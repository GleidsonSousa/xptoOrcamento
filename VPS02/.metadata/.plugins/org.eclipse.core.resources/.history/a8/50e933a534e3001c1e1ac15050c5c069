package viewers;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;


import controllers.OrcamentoProcess;
import models.Orcamento;

 
	public class OrcamentoForm extends JDialog implements ActionListener {

		private static final long serialVersionUID = 1L;
		private JPanel painel;
		private JLabel id, data, equipamento, custoHora , tempoGasto;
		private JTextField tfId, tfData,  tfCustoHora, tfTempoGasto; 
		private JComboBox<String> cbEquipamento;
		private JScrollPane rolagem;
		private JTable table;
		private DefaultTableModel tableModel;
		private JButton create, read, update, delete;
		private int autoIds = OrcamentoProcess.orcamentos.get(OrcamentoProcess.orcamentos.size()-1).getId() + 1;

		
		public OrcamentoForm() {
			
			//view
			setTitle("Cadastro de Orçamentos");
			setBounds(150, 170, 800, 600);
		painel = new JPanel();
		painel.setBackground(new Color(0, 160, 0));
		setContentPane(painel);
		setLayout(null);
		
		//Label
		id = new JLabel("Id:");
		id.setBounds(115, 25, 120, 30);
		painel.add(id);
		data = new JLabel("Data:");
		data.setBounds(100, 65, 120, 30);
		painel.add(data);
		equipamento = new JLabel("Equipamento:");
		equipamento.setBounds(50, 105, 120, 30);
		painel.add(equipamento);
		custoHora = new JLabel("Custo por Hora:");
		custoHora.setBounds(50, 145, 120, 30);
		painel.add(custoHora);
		tempoGasto = new JLabel("Tempo Gasto:");
		tempoGasto.setBounds(50, 185, 120, 30);
		painel.add(tempoGasto);
		
		 //Text Fields
		
		tfId = new JTextField(String.format("%d", autoIds));
		tfId.setEditable(false);
		tfId.setBounds(140, 25, 100, 30);
		painel.add(tfId);
		tfData = new JTextField();
		tfData.setBounds(140, 65, 255, 30);
		painel.add(tfData);
		cbEquipamento = new JComboBox<String>(new String[] { "Conjunto1", "Conjunto2", "Conjunto3", "Outro" });
		cbEquipamento.setBounds(140, 105, 255, 30);
		painel.add(cbEquipamento);
		tfCustoHora = new JTextField("50,00");
		tfCustoHora.setBounds(140, 145, 255, 30);
		painel.add(tfCustoHora);
		tfTempoGasto = new JTextField("1,00");
		tfTempoGasto.setBounds(140, 185, 255, 30);
		painel.add(tfTempoGasto);
		
		//Table
		
		table = new JTable();
		tableModel = new DefaultTableModel();
		tableModel.addColumn("Id");
		tableModel.addColumn("Data");
		tableModel.addColumn("Equipamento");
		tableModel.addColumn("Custo Hora");
		tableModel.addColumn("Tempo Gasto");
		tableModel.addColumn("Total");
		
		if (OrcamentoProcess.orcamentos.size() != 1) {
			preencherTabela();
		}
		table = new JTable(tableModel);
		table.setEnabled(false);
		rolagem = new JScrollPane(table);
		rolagem.setBounds(20, 310, 740, 230);
		painel.add(rolagem);

		//Buttons
		create = new JButton("Cadastrar");
		read = new JButton("Buscar");
		update = new JButton("Alterar");
		delete = new JButton("Excluir");
		create.setBounds(405, 65, 110, 30);
		read.setBounds(525, 65, 110, 30);
		update.setBounds(405, 100, 110, 30);
		delete.setBounds(525, 100, 110, 30);
		update.setEnabled(false);
		delete.setEnabled(false);
		painel.add(create);
		painel.add(read);
		painel.add(update);
		painel.add(delete);
		
		
		
		//relatar o evento dos botões
		create.addActionListener(this);
		read.addActionListener(this);
		update.addActionListener(this);
		delete.addActionListener(this);

	}
		int obterIndiceEquip(String equipamento) {
			switch (equipamento) {
			case "Conjunto1":
				return 0;
			case "Conjunto2":
				return 1;
			case "Conjunto3":
				return 2;
			case "Outro":
				return 3;
			default:
				return -1;
			}
		}
		
		//CADASTRAR - CRUD
		private void cadastrar() {
			if (tfCustoHora.getText().length() != 0 && tfTempoGasto.getText().length() != 0) {
				ProcessManutencoes.manutencoes.add(new Manutencao(tfId.getText(),
						cbEquipamento.getSelectedItem().toString(), tfCustoHora.getText(), tfTempoGasto.getText()));
				autoIds++;
				preencherTabela();
				limparCampos();
				ProcessManutencoes.salvar();
			} else {
				JOptionPane.showMessageDialog(this, "Favor preencher todos os campos.");
			}
		}

		
		
		
		// BUSCAR - CRUD
		private void buscar() {
			String entrada = JOptionPane.showInputDialog(this, "Digite o Id ou Equipamento ou data da manutenÃ§Ã£o:");
			boolean isNumeric = true;
			if (entrada != null && !entrada.equals("")) {
				for (int i = 0; i < entrada.length(); i++) {
					if (!Character.isDigit(entrada.charAt(i))) {
						isNumeric = false;
						limparCampos();
					}
				}
			} else {
				isNumeric = false;
				limparCampos();
			}
			if (isNumeric) {
				int id = Integer.parseInt(entrada);
				Manutencao manutencao = new Manutencao(id);
				if (ProcessManutencoes.manutencoes.contains(manutencao)) {
					int indice = ProcessManutencoes.manutencoes.indexOf(manutencao);
					preencheCampos(indice);
					preencherTabela();
				} else {
					JOptionPane.showMessageDialog(this, "Equipamento nÃ£o encontrado");
				}
			} else {
				preencherTabela(entrada);
			}
		}
		
		//Alterar-CRUD
		private void alterar() {
			if (tfCustoHora.getText().length() != 0 && tfTempoGasto.getText().length() != 0) {
				int id = Integer.parseInt(tfId.getText());
				Manutencao manutencao = new Manutencao(id);
				int indice = ProcessManutencoes.manutencoes.indexOf(manutencao);
				ProcessManutencoes.manutencoes.set(indice, new Manutencao(tfId.getText(), tfData.getText(),
						cbEquipamento.getSelectedItem().toString(), tfCustoHora.getText(), tfTempoGasto.getText()));
				autoIds++;
				preencherTabela();
				limparCampos();
				ProcessManutencoes.salvar();
			} else {
				JOptionPane.showMessageDialog(this, "Favor preencher todos os campos.");
			}
		}
		
		//Excluir-CRUD
		private void excluir() {
			int id = Integer.parseInt(tfId.getText());
			Manutencao manutencao = new Manutencao(id);
			int indice = ProcessManutencoes.manutencoes.indexOf(manutencao);
			ProcessManutencoes.manutencoes.remove(indice);
			preencherTabela();
			limparCampos();
			create.setEnabled(true);
			update.setEnabled(false);
			delete.setEnabled(false);
			tfId.setText(String.format("%d", autoIds));
			ProcessManutencoes.salvar();
		}
		
		
		private void preencherTabela() {
			int totLinhas = tableModel.getRowCount();
			if (tableModel.getRowCount() > 0) {
				for (int i = 0; i < totLinhas; i++) {
					tableModel.removeRow(0);
				}
			}
			for (Manutencao m : ProcessManutencoes.manutencoes) {
				tableModel.addRow(m.toVetor());
			}
		}

		private void preencherTabela(String filtro) {
			int totLinhas = tableModel.getRowCount();
			if (tableModel.getRowCount() > 0) {
				for (int i = 0; i < totLinhas; i++) {
					tableModel.removeRow(0);
				}
			}
			for (Manutencao m :ProcessManutencoes.manutencoes) {
				if (m.getEquipamento().toUpperCase().contains(filtro.toUpperCase()) || m.getData("").contains(filtro)) {
					tableModel.addRow(m.toVetor());
				}
			}
		}

		private void limparCampos() {
			tfId.setText(String.format("%d", autoIds));
			tfCustoHora.setText("100,00");
			tfTempoGasto.setText("1,00");
			tfData.setEnabled(false);
			create.setEnabled(true);
			update.setEnabled(false);
			delete.setEnabled(false);
		}

		private void preencheCampos(int indice) {
			tfId.setText(ProcessManutencoes.manutencoes.get(indice).getId("s"));
			tfData.setText(ProcessManutencoes.manutencoes.get(indice).getData("s"));
			cbEquipamento
					.setSelectedIndex(obterIndiceEquip(ProcessManutencoes.manutencoes.get(indice).getEquipamento()));
			tfCustoHora.setText(ProcessManutencoes.manutencoes.get(indice).getcustoHora("s"));
			tfTempoGasto.setText(ProcessManutencoes.manutencoes.get(indice).gettempoGasto("s"));
			create.setEnabled(false);
			update.setEnabled(true);
			delete.setEnabled(true);
			tfData.setEnabled(true);
		}

		
		
		@Override
		public void actionPerformed(ActionEvent e) {
			
			if (e.getSource() == create) {
				
				cadastrar();
			}
			if (e.getSource() == read) {
				buscar();
			}
			if (e.getSource() == update) {
				alterar();
			}
			if (e.getSource() == delete) {
				excluir();
			}
		}
			
		public static void main(String[] args) {
			ProcessManutencoes.abrir();
			FormManutencoes tela = new FormManutencoes();
			tela.setVisible(true);
		}
	}